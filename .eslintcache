[{"/Users/zigron/Documents/personalLearning/ReactJS-Web/react-complete-guide/src/Person/Person.js":"1","/Users/zigron/Documents/personalLearning/ReactJS-Web/react-complete-guide/src/App.js":"2","/Users/zigron/Documents/personalLearning/ReactJS-Web/react-complete-guide/src/index.js":"3","/Users/zigron/Documents/personalLearning/ReactJS-Web/react-complete-guide/src/Components/CharComponent.js":"4","/Users/zigron/Documents/personalLearning/ReactJS-Web/react-complete-guide/src/reportWebVitals.js":"5","/Users/zigron/Documents/personalLearning/ReactJS-Web/react-complete-guide/src/User/UserInput.js":"6","/Users/zigron/Documents/personalLearning/ReactJS-Web/react-complete-guide/src/Components/ValidationComponent.js":"7"},{"size":364,"mtime":1622907721424,"results":"8","hashOfConfig":"9"},{"size":7921,"mtime":1622907674029,"results":"10","hashOfConfig":"9"},{"size":500,"mtime":1611242237198,"results":"11","hashOfConfig":"9"},{"size":377,"mtime":1622650286276,"results":"12","hashOfConfig":"9"},{"size":362,"mtime":1611242237200,"results":"13","hashOfConfig":"9"},{"size":426,"mtime":1613473651821,"results":"14","hashOfConfig":"9"},{"size":327,"mtime":1613708236501,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"113zl9y",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/zigron/Documents/personalLearning/ReactJS-Web/react-complete-guide/src/Person/Person.js",["31"],"/Users/zigron/Documents/personalLearning/ReactJS-Web/react-complete-guide/src/App.js",["32"],"import React, {Component} from 'react'\nimport './App.css';\nimport Person from './Person/Person'\nimport UserInput from './User/UserInput'\n// import UserOutput from './User/UserOutput'\nimport Radium, {StyleRoot} from 'radium'\nimport ValidationComponent from './Components/ValidationComponent'\nimport CharComponent from './Components/CharComponent'\n\n// const App = (props) => {\n//     const[personState,setPersonState] = useState({\n//         persons:[\n//             {name: 'Zabih', age: 29},\n//             {name: 'Mehdi', age: 32},\n//             {name: 'Numra', age: 30}\n//         ]\n//     })\n//     const buttonSwitchHandler = (newName) => {\n//         let personsUpdateArray = [...personState.persons]\n//         let updatedName = personsUpdateArray.findIndex(person => person.name === 'Zabih')\n//         if (updatedName >= 0)\n//             personsUpdateArray[updatedName].name = newName\n//         setPersonState({\n//             persons:[...personsUpdateArray]\n//         })\n//     }\n//     const changeTextHandler = (event) => {\n//         setPersonState({\n//             persons:[\n//                 {name: event.target.value, age: 29},\n//                 {name: 'Mehdi', age: 32},\n//                 {name: 'Numra', age: 30}\n//             ]\n//         })\n//     }\n//\n//     const style = {\n//         backgroundColor: 'white',\n//         font: 'inherit',\n//         border: '1px solid blue',\n//         padding: '8px',\n//         cursor: 'pointer'\n//     }\n//     return(\n//         <div className=\"App\">\n//             <h1>I am a react app</h1>\n//             <Person name = {personState.persons[0].name} age = {personState.persons[0].age}\n//                 change={changeTextHandler}/>\n//             <Person name = {personState.persons[1].name} age = {personState.persons[1].age}/>\n//             <Person name = {personState.persons[2].name} age = {personState.persons[2].age}/>\n//             <button style={style} onClick={() => buttonSwitchHandler('Zabihullah')}>Submit</button>\n//         </div>)\n// }\n\nclass App extends Component{\n\n    state = {\n        persons:[\n            {id:'Z2M', name: 'Zabih', age: 29},\n            {id:'M5F', name: 'Mehdi', age: 32},\n            {id:'U1D', name: 'Usman', age: 30}\n        ],\n        userName: 'Zabihullah',\n        charComponent:[],\n        charValue: '',\n        newCharValue:'',\n        showPersons: false,\n        userInput: ''\n    }\n\n    buttonSwitchHandler = () => {\n        let personsUpdateArray = [...this.state.persons]\n        let updatedName = personsUpdateArray.findIndex(person => person.name === 'Zabih')\n        personsUpdateArray[updatedName].name = 'Zabihullah'\n        this.setState({\n            persons:[...personsUpdateArray]\n        })\n    }\n\n    changeTextHandler = (event,id) => {\n        const selectedPersonIndex = this.state.persons.findIndex(person => {\n            return person.id === id\n        })\n        const persons1 = [...this.state.persons]\n        persons1[selectedPersonIndex].name = event.target.value\n        this.setState({persons:persons1})\n    }\n\n    changeUserNameHandler = (event) => {\n        this.setState({\n            userName: event.target.value\n        })\n    }\n\n    changeCharValue = (event) => {\n        this.setState({\n            newCharValue: event.target.value\n        })\n    }\n\n    togglePersonData = () => {\n        const showPersonData = this.state.showPersons\n        this.setState({\n            showPersons: !showPersonData\n        })\n    }\n\n    deletePersonHandler = (personIndex) => {\n        // const persons = this.state.persons.slice() //old Syntax\n        const persons = [...this.state.persons] //new ES6 Syntax\n        persons.splice(personIndex,1)\n        this.setState({persons})\n    }\n\n    deleteCharComponent = (characterIndex) => {\n        let charArray = [...this.state.charComponent]\n        charArray.splice(characterIndex,1)\n        this.setState({\n            charComponent: charArray\n        })\n\n    }\n\n    deleteCharacter = (characterIndex) => {\n        let characterArray = this.state.userInput.split('');\n        characterArray.splice(characterIndex,1)\n        let updatedText = characterArray.join('')\n        this.setState({\n            userInput: updatedText\n        })\n    }\n    addCharComponent = (character) => {\n        this.setState({\n            charComponent: [...this.state.charComponent,character],\n            newCharValue: ''\n        })\n        // console.log('this.state.charComponent.length: ', this.state.charComponent.length)\n        // console.log('this.state.newCharValue: ', this.state.newCharValue)\n        console.log('character: ', character)\n    }\n\n    onChangeHandler = (event) => {\n        this.setState({\n            userInput: event.target.value\n        });\n    }\n\n    render(){\n        const style = {\n            backgroundColor: 'Green',\n            color: 'white',\n            font: 'inherit',\n            border: '1px solid blue',\n            padding: '8px',\n            width: '20%',\n            margin: '0 auto',\n            cursor: 'pointer'\n        }\n        let person = null\n        if (this.state.showPersons) {\n            person = this.state.persons.map((person,personIndex) => {\n                    return <Person\n                            name = {person.name}\n                            age = {person.age}\n                            click = {()=> {this.deletePersonHandler(personIndex)}}\n                            key = {person.id}\n                            changed = {(event) =>{this.changeTextHandler(event,person.id)}}/>\n            })\n            style.backgroundColor = \"red\"\n        }\n        let character = this.state.charComponent.map((characterVal,characterIndex)=>{\n            return <CharComponent character={characterVal}\n                                  click = {()=>{this.deleteCharComponent(characterIndex)}}\n                                  key={characterIndex}/>\n        })\n        let maxCharacter = this.state.userInput.split('').map((ch,index) => {\n            return <CharComponent\n                    character = {ch}\n                    key = {index}\n                    click = {() => this.deleteCharacter(index)}/>\n        })\n        let userNameLength = this.state.userName.length\n        const classes = []\n        if (this.state.persons.length <=2){\n            classes.push(\"Red\")\n        }\n        if (this.state.persons.length <=1){\n            classes.push(\"Bold\")\n        }\n        return (\n            <StyleRoot>\n                <div className=\"App\">\n                    <h1>I am a react app</h1>\n                    <p className={classes.join(' ')}>This is really working</p>\n                    <button style = {style} onClick={this.togglePersonData}>Toggle Persons</button>\n                    {person}\n                    <UserInput name = {this.state.userName} changeUserName={this.changeUserNameHandler}/>\n                    <p>UserNameLength: {userNameLength}</p>\n                    <ValidationComponent length={userNameLength}/>\n                    <div style={{background: '#eee', margin: '1% 35% 0'}}>\n                        <input placeholder=\"Enter Text\"\n                               onChange={this.changeCharValue}\n                               value={this.state.newCharValue}/>\n                        <button className = \"style\" onClick = {()=>this.addCharComponent(this.state.newCharValue)}> Add Character Component </button>\n                    </div>\n                    {character}\n                    <div style={{background: '#eee', margin: '1% 35% 0'}}>\n                        <input\n                            type = \"text\"\n                            onChange={this.onChangeHandler}\n                            value={this.state.userInput}\n                        />\n                        {maxCharacter}\n                    </div>\n                </div>\n            </StyleRoot>\n        );\n    }\n}\n\nexport default App;     //High order Component\n","/Users/zigron/Documents/personalLearning/ReactJS-Web/react-complete-guide/src/index.js",[],"/Users/zigron/Documents/personalLearning/ReactJS-Web/react-complete-guide/src/Components/CharComponent.js",[],"/Users/zigron/Documents/personalLearning/ReactJS-Web/react-complete-guide/src/reportWebVitals.js",[],"/Users/zigron/Documents/personalLearning/ReactJS-Web/react-complete-guide/src/User/UserInput.js",[],"/Users/zigron/Documents/personalLearning/ReactJS-Web/react-complete-guide/src/Components/ValidationComponent.js",[],{"ruleId":"33","severity":1,"message":"34","line":3,"column":8,"nodeType":"35","messageId":"36","endLine":3,"endColumn":14},{"ruleId":"33","severity":1,"message":"34","line":6,"column":8,"nodeType":"35","messageId":"36","endLine":6,"endColumn":14},"no-unused-vars","'Radium' is defined but never used.","Identifier","unusedVar"]